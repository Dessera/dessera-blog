{"content":"<p>说到现代C++，我们就不得不提到智能指针，这些模板类自C++11起被引入进标准库，不涉及操作系统、不涉及繁琐的内存申请流程，甚至你自己就能实现一个简单的智能指针。但即便如此，直到今天，仍然有人没有了解过，也不去使用智能指针。</p>\n<p>实际上我认为，智能指针为 C++ 这门语言带来了一个新的概念，即所有权。智能指针表面上管理了一块由用户申请的内存，但实际上它是管理了这一块资源的所有权。这一概念在 Rust 语言中被更加明确地表达出来，但在 C++ 中，我们也可以通过智能指针来实现。</p>\n<h2 id=\"所有权\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#所有权\"><span>所有权</span></a></h2>\n<p>为什么会产生所有权机制？回想一下你在古老的 C/C++ 工作时，你不得不手动申请内存，手动管理他们的销毁时机，使用对象，还要时刻提防可能存在的拷贝操作（后来还要提防一些移动操作）。这些东西一开始就该由程序员管理，但是别忘了，我们在谈论一个现代语言！</p>\n<p>在我看来，现代语言是高级语言的一个子集，它们应当在某一领域，解决过去程序员们的痛点。专注于底层的现代语言，如 Zig，它保留了内存管理的能力、并在语言层面支持了 Allocator, 扩充了内存管理的能力。而另一些现代语言，如 Rust，它在语言层面支持了所有权机制，使得程序员不再需要关心内存的申请和释放。</p>\n<p>我们在谈论C++，从C++11开始，这门古老的语言开始了自己的现代化之路，而其中一个最显著的改变就是智能指针和其带来的所有权机制。</p>\n<p>简单来说，所有权是一种属于关系，在这种关系下定义的对象其本身不会有隐式的复制和移动操作，将一个对象赋值、传递给另一个对象，只不过是将所有权转移给了另一个对象，在这个过程中，没有任何内存的拷贝和移动操作。</p>\n<h2 id=\"所有权的实现\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#所有权的实现\"><span>所有权的实现</span></a></h2>\n<p>对于 C++ 来说，所有权有两种，一种是独占所有权，另一种是共享所有权。独占所有权是指一个对象只能被一个所有者拥有，而共享所有权是指一个对象可以被多个所有者拥有。独占所有权在 C++ 中由 <code v-pre>std::unique_ptr</code> 实现，而共享所有权则由 <code v-pre>std::shared_ptr</code> 实现。</p>\n<p>在一些场景（尤其是嵌入式领域）中，我们通常会针对每一个通信协议创建一个类，他们负责与其他设备的通信实现，而一些上层应用类，它们会需要调用这些协议类的方法。</p>\n<p>创建这个协议类有两种方式：</p>\n<ul>\n<li>由应用类自己创建</li>\n<li>从外部创建，传递给应用类</li>\n</ul>\n<p>但一般情况下，这些协议类的 IO 通道都是有限的，我们不希望应用类创建多个相同的协议类，这时候我们就可以使用智能指针来管理这些协议类的所有权。</p>\n<p>由此可以引申出两种情况：</p>\n<ul>\n<li>一个协议类只服务于一个应用类，这时候我们可以使用 <code v-pre>std::unique_ptr</code> 来管理这个协议类的所有权</li>\n<li>一个协议类可能会被多个应用类使用，这时候我们可以使用 <code v-pre>std::shared_ptr</code> 来管理这个协议类的所有权</li>\n</ul>\n<h2 id=\"std-unique-ptr\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#std-unique-ptr\"><span><code v-pre>std::unique_ptr</code></span></a></h2>\n<p><code v-pre>std::unique_ptr</code> 是一个独占所有权的智能指针，它只能有一个所有者，当这个所有者被销毁时，它所管理的资源也会被销毁。</p>\n<div class=\"language-cpp line-numbers-mode\" data-ext=\"cpp\" data-title=\"cpp\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">#</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">include</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> &#x3C;</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">memory</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Application</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> public</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 构造时，将协议类的所有权转移给 Application</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  Application</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">unique_ptr</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">Protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> :</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> protocol_</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">move</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">))</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> private</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">unique_ptr</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Protocol</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> protocol_</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> main</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 创建一个协议类，此时所有权掌握在 main 函数中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">unique_ptr</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Protocol</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> protocol </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">make_unique</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">Protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 创建一个应用类，将协议类的所有权转移给 Application</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">  Application </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">app</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">move</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"std-shared-ptr\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#std-shared-ptr\"><span><code v-pre>std::shared_ptr</code></span></a></h2>\n<p><code v-pre>std::shared_ptr</code> 是一个共享所有权的智能指针，它可以有多个所有者，当最后一个所有者被销毁时，它所管理的资源也会被销毁。</p>\n<div class=\"language-cpp line-numbers-mode\" data-ext=\"cpp\" data-title=\"cpp\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">#</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">include</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> &#x3C;</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">memory</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Application</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> public</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 构造时，将协议类的所有权转移给 Application</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  Application</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">shared_ptr</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">Protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> :</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> protocol_</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> private</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">shared_ptr</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Protocol</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> protocol_</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> main</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 创建一个协议类，此时所有权掌握在 main 函数中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">shared_ptr</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Protocol</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> protocol </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">make_shared</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">Protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 创建一个应用类，将协议类的所有权转移给 Application</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">  Application </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">app</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 创建另一个应用类，共享协议类的所有权</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">  Application </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">app2</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"论所有权的转让与移动\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#论所有权的转让与移动\"><span>论所有权的转让与移动</span></a></h2>\n<p>很多人都有一个误解，认为移动语义体现了所有权的转让，但是，二者是不同的。</p>\n<p>不论什么情况下，移动构造一定会重新创建资源对象，而至于资源内部的数据是如何移动的，这是对象的实现决定的，但针对资源对象本身，在这个过程中一定会重新创建一个资源对象。</p>\n<p>而所有权的转让是另一回事，它直接将自己拥有的资源本身交予了另一个对象，在这个过程中，没有任何资源的拷贝和移动操作（实际上，在计算机眼中，这个过程什么也没发生）。</p>\n<p>有趣的一点是，所有权的转让这一操作的实现依靠了移动语义，<code v-pre>std::unique_ptr</code> 不允许拷贝，但允许移动，刚才我们提到移动一定会创建新对象，而<code v-pre>std::unqiue_ptr</code>的移动虽然创建了新的<code v-pre>std::unique_ptr</code>，但其内部的指针仍然指向同一个资源对象，这就是所有权的转让的实现。</p>\n<p><code v-pre>std::shared_ptr</code>维护了一个引用计数，这让它可以进行拷贝，也可以进行移动，引用计数会时刻保证资源对象的生命周期，当最后一个所有者被销毁时，资源对象也会被销毁。</p>\n<h2 id=\"论资源的所有者和引用者\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#论资源的所有者和引用者\"><span>论资源的所有者和引用者</span></a></h2>\n<p>上文我们忽略的一种情况，有一些类或函数并不拥有资源，但他们需要暂时的资源使用权。对于我们已经建立的资源所有权模型，每一种所有权模式都有其对应的引用类型。</p>\n<p><code v-pre>std::unique_ptr</code> 对应的引用类型是原生指针，它指向资源对象本身，但在语义上不拥有它，只是暂时的使用。</p>\n<p><code v-pre>std::shared_ptr</code> 对应的引用类型是 <code v-pre>std::weak_ptr</code>，它指向资源对象，但不会增加引用计数，当资源对象被销毁时，<code v-pre>std::weak_ptr</code> 会被置空。</p>\n<div class=\"language-cpp line-numbers-mode\" data-ext=\"cpp\" data-title=\"cpp\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">#</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">include</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> &#x3C;</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">memory</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Application</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> public</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 构造时，将协议类的所有权转移给 Application</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  Application</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">shared_ptr</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">Protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> :</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> protocol_</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> private</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">shared_ptr</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Protocol</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> protocol_</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> foo</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">weak_ptr</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">Protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> weak_protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 使用 weak_ptr</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> main</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 创建一个协议类，此时所有权掌握在 main 函数中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">shared_ptr</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Protocol</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> protocol </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">make_shared</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">Protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 创建一个应用类，将协议类的所有权转移给 Application</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">  Application </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">app</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 创建一个 weak_ptr，暂时使用协议类</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">weak_ptr</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Protocol</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> weak_protocol </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 调用函数，传递 weak_ptr</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  foo</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">weak_protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>值得注意的一点是，<code v-pre>std::weak_ptr</code> 不能直接使用，它需要通过 <code v-pre>lock</code> 方法转换为 <code v-pre>std::shared_ptr</code> 才能使用。</p>\n<h2 id=\"总结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#总结\"><span>总结</span></a></h2>\n<p>新的资源管理模型标志着现代 C++ 的到来，我一直秉承着一个观点——任何拥有内存申请和释放的程序都应当使用智能指针，这不仅仅是为了避免内存泄漏，更是为了通过所有权这一概念更好地构建应用逻辑模型。</p>\n","env":{"base":"/dessera-blog/","filePath":"/data/projects/dessera-blog/docs/preview/浅析C++所有权机制.md","filePathRelative":"preview/浅析C++所有权机制.md","frontmatter":{"title":"浅析C++所有权机制","tags":["C++","所有权"],"createTime":"2024/04/04 09:39:41","permalink":"/article/w5vsqu3d/"},"sfcBlocks":{"template":{"type":"template","content":"<template><p>说到现代C++，我们就不得不提到智能指针，这些模板类自C++11起被引入进标准库，不涉及操作系统、不涉及繁琐的内存申请流程，甚至你自己就能实现一个简单的智能指针。但即便如此，直到今天，仍然有人没有了解过，也不去使用智能指针。</p>\n<p>实际上我认为，智能指针为 C++ 这门语言带来了一个新的概念，即所有权。智能指针表面上管理了一块由用户申请的内存，但实际上它是管理了这一块资源的所有权。这一概念在 Rust 语言中被更加明确地表达出来，但在 C++ 中，我们也可以通过智能指针来实现。</p>\n<h2 id=\"所有权\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#所有权\"><span>所有权</span></a></h2>\n<p>为什么会产生所有权机制？回想一下你在古老的 C/C++ 工作时，你不得不手动申请内存，手动管理他们的销毁时机，使用对象，还要时刻提防可能存在的拷贝操作（后来还要提防一些移动操作）。这些东西一开始就该由程序员管理，但是别忘了，我们在谈论一个现代语言！</p>\n<p>在我看来，现代语言是高级语言的一个子集，它们应当在某一领域，解决过去程序员们的痛点。专注于底层的现代语言，如 Zig，它保留了内存管理的能力、并在语言层面支持了 Allocator, 扩充了内存管理的能力。而另一些现代语言，如 Rust，它在语言层面支持了所有权机制，使得程序员不再需要关心内存的申请和释放。</p>\n<p>我们在谈论C++，从C++11开始，这门古老的语言开始了自己的现代化之路，而其中一个最显著的改变就是智能指针和其带来的所有权机制。</p>\n<p>简单来说，所有权是一种属于关系，在这种关系下定义的对象其本身不会有隐式的复制和移动操作，将一个对象赋值、传递给另一个对象，只不过是将所有权转移给了另一个对象，在这个过程中，没有任何内存的拷贝和移动操作。</p>\n<h2 id=\"所有权的实现\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#所有权的实现\"><span>所有权的实现</span></a></h2>\n<p>对于 C++ 来说，所有权有两种，一种是独占所有权，另一种是共享所有权。独占所有权是指一个对象只能被一个所有者拥有，而共享所有权是指一个对象可以被多个所有者拥有。独占所有权在 C++ 中由 <code v-pre>std::unique_ptr</code> 实现，而共享所有权则由 <code v-pre>std::shared_ptr</code> 实现。</p>\n<p>在一些场景（尤其是嵌入式领域）中，我们通常会针对每一个通信协议创建一个类，他们负责与其他设备的通信实现，而一些上层应用类，它们会需要调用这些协议类的方法。</p>\n<p>创建这个协议类有两种方式：</p>\n<ul>\n<li>由应用类自己创建</li>\n<li>从外部创建，传递给应用类</li>\n</ul>\n<p>但一般情况下，这些协议类的 IO 通道都是有限的，我们不希望应用类创建多个相同的协议类，这时候我们就可以使用智能指针来管理这些协议类的所有权。</p>\n<p>由此可以引申出两种情况：</p>\n<ul>\n<li>一个协议类只服务于一个应用类，这时候我们可以使用 <code v-pre>std::unique_ptr</code> 来管理这个协议类的所有权</li>\n<li>一个协议类可能会被多个应用类使用，这时候我们可以使用 <code v-pre>std::shared_ptr</code> 来管理这个协议类的所有权</li>\n</ul>\n<h2 id=\"std-unique-ptr\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#std-unique-ptr\"><span><code v-pre>std::unique_ptr</code></span></a></h2>\n<p><code v-pre>std::unique_ptr</code> 是一个独占所有权的智能指针，它只能有一个所有者，当这个所有者被销毁时，它所管理的资源也会被销毁。</p>\n<div class=\"language-cpp line-numbers-mode\" data-ext=\"cpp\" data-title=\"cpp\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">#</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">include</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> &#x3C;</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">memory</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Application</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> public</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 构造时，将协议类的所有权转移给 Application</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  Application</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">unique_ptr</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">Protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> :</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> protocol_</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">move</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">))</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> private</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">unique_ptr</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Protocol</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> protocol_</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> main</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 创建一个协议类，此时所有权掌握在 main 函数中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">unique_ptr</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Protocol</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> protocol </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">make_unique</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">Protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 创建一个应用类，将协议类的所有权转移给 Application</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">  Application </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">app</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">move</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"std-shared-ptr\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#std-shared-ptr\"><span><code v-pre>std::shared_ptr</code></span></a></h2>\n<p><code v-pre>std::shared_ptr</code> 是一个共享所有权的智能指针，它可以有多个所有者，当最后一个所有者被销毁时，它所管理的资源也会被销毁。</p>\n<div class=\"language-cpp line-numbers-mode\" data-ext=\"cpp\" data-title=\"cpp\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">#</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">include</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> &#x3C;</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">memory</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Application</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> public</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 构造时，将协议类的所有权转移给 Application</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  Application</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">shared_ptr</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">Protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> :</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> protocol_</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> private</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">shared_ptr</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Protocol</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> protocol_</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> main</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 创建一个协议类，此时所有权掌握在 main 函数中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">shared_ptr</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Protocol</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> protocol </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">make_shared</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">Protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 创建一个应用类，将协议类的所有权转移给 Application</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">  Application </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">app</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 创建另一个应用类，共享协议类的所有权</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">  Application </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">app2</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"论所有权的转让与移动\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#论所有权的转让与移动\"><span>论所有权的转让与移动</span></a></h2>\n<p>很多人都有一个误解，认为移动语义体现了所有权的转让，但是，二者是不同的。</p>\n<p>不论什么情况下，移动构造一定会重新创建资源对象，而至于资源内部的数据是如何移动的，这是对象的实现决定的，但针对资源对象本身，在这个过程中一定会重新创建一个资源对象。</p>\n<p>而所有权的转让是另一回事，它直接将自己拥有的资源本身交予了另一个对象，在这个过程中，没有任何资源的拷贝和移动操作（实际上，在计算机眼中，这个过程什么也没发生）。</p>\n<p>有趣的一点是，所有权的转让这一操作的实现依靠了移动语义，<code v-pre>std::unique_ptr</code> 不允许拷贝，但允许移动，刚才我们提到移动一定会创建新对象，而<code v-pre>std::unqiue_ptr</code>的移动虽然创建了新的<code v-pre>std::unique_ptr</code>，但其内部的指针仍然指向同一个资源对象，这就是所有权的转让的实现。</p>\n<p><code v-pre>std::shared_ptr</code>维护了一个引用计数，这让它可以进行拷贝，也可以进行移动，引用计数会时刻保证资源对象的生命周期，当最后一个所有者被销毁时，资源对象也会被销毁。</p>\n<h2 id=\"论资源的所有者和引用者\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#论资源的所有者和引用者\"><span>论资源的所有者和引用者</span></a></h2>\n<p>上文我们忽略的一种情况，有一些类或函数并不拥有资源，但他们需要暂时的资源使用权。对于我们已经建立的资源所有权模型，每一种所有权模式都有其对应的引用类型。</p>\n<p><code v-pre>std::unique_ptr</code> 对应的引用类型是原生指针，它指向资源对象本身，但在语义上不拥有它，只是暂时的使用。</p>\n<p><code v-pre>std::shared_ptr</code> 对应的引用类型是 <code v-pre>std::weak_ptr</code>，它指向资源对象，但不会增加引用计数，当资源对象被销毁时，<code v-pre>std::weak_ptr</code> 会被置空。</p>\n<div class=\"language-cpp line-numbers-mode\" data-ext=\"cpp\" data-title=\"cpp\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">#</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">include</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> &#x3C;</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">memory</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Application</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> public</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 构造时，将协议类的所有权转移给 Application</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  Application</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">shared_ptr</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">Protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> :</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> protocol_</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> private</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">shared_ptr</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Protocol</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> protocol_</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> foo</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">weak_ptr</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">Protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> weak_protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 使用 weak_ptr</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> main</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 创建一个协议类，此时所有权掌握在 main 函数中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">shared_ptr</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Protocol</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> protocol </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">make_shared</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">Protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 创建一个应用类，将协议类的所有权转移给 Application</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">  Application </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">app</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 创建一个 weak_ptr，暂时使用协议类</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">weak_ptr</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Protocol</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> weak_protocol </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 调用函数，传递 weak_ptr</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  foo</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">weak_protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>值得注意的一点是，<code v-pre>std::weak_ptr</code> 不能直接使用，它需要通过 <code v-pre>lock</code> 方法转换为 <code v-pre>std::shared_ptr</code> 才能使用。</p>\n<h2 id=\"总结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#总结\"><span>总结</span></a></h2>\n<p>新的资源管理模型标志着现代 C++ 的到来，我一直秉承着一个观点——任何拥有内存申请和释放的程序都应当使用智能指针，这不仅仅是为了避免内存泄漏，更是为了通过所有权这一概念更好地构建应用逻辑模型。</p>\n</template>","contentStripped":"<p>说到现代C++，我们就不得不提到智能指针，这些模板类自C++11起被引入进标准库，不涉及操作系统、不涉及繁琐的内存申请流程，甚至你自己就能实现一个简单的智能指针。但即便如此，直到今天，仍然有人没有了解过，也不去使用智能指针。</p>\n<p>实际上我认为，智能指针为 C++ 这门语言带来了一个新的概念，即所有权。智能指针表面上管理了一块由用户申请的内存，但实际上它是管理了这一块资源的所有权。这一概念在 Rust 语言中被更加明确地表达出来，但在 C++ 中，我们也可以通过智能指针来实现。</p>\n<h2 id=\"所有权\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#所有权\"><span>所有权</span></a></h2>\n<p>为什么会产生所有权机制？回想一下你在古老的 C/C++ 工作时，你不得不手动申请内存，手动管理他们的销毁时机，使用对象，还要时刻提防可能存在的拷贝操作（后来还要提防一些移动操作）。这些东西一开始就该由程序员管理，但是别忘了，我们在谈论一个现代语言！</p>\n<p>在我看来，现代语言是高级语言的一个子集，它们应当在某一领域，解决过去程序员们的痛点。专注于底层的现代语言，如 Zig，它保留了内存管理的能力、并在语言层面支持了 Allocator, 扩充了内存管理的能力。而另一些现代语言，如 Rust，它在语言层面支持了所有权机制，使得程序员不再需要关心内存的申请和释放。</p>\n<p>我们在谈论C++，从C++11开始，这门古老的语言开始了自己的现代化之路，而其中一个最显著的改变就是智能指针和其带来的所有权机制。</p>\n<p>简单来说，所有权是一种属于关系，在这种关系下定义的对象其本身不会有隐式的复制和移动操作，将一个对象赋值、传递给另一个对象，只不过是将所有权转移给了另一个对象，在这个过程中，没有任何内存的拷贝和移动操作。</p>\n<h2 id=\"所有权的实现\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#所有权的实现\"><span>所有权的实现</span></a></h2>\n<p>对于 C++ 来说，所有权有两种，一种是独占所有权，另一种是共享所有权。独占所有权是指一个对象只能被一个所有者拥有，而共享所有权是指一个对象可以被多个所有者拥有。独占所有权在 C++ 中由 <code v-pre>std::unique_ptr</code> 实现，而共享所有权则由 <code v-pre>std::shared_ptr</code> 实现。</p>\n<p>在一些场景（尤其是嵌入式领域）中，我们通常会针对每一个通信协议创建一个类，他们负责与其他设备的通信实现，而一些上层应用类，它们会需要调用这些协议类的方法。</p>\n<p>创建这个协议类有两种方式：</p>\n<ul>\n<li>由应用类自己创建</li>\n<li>从外部创建，传递给应用类</li>\n</ul>\n<p>但一般情况下，这些协议类的 IO 通道都是有限的，我们不希望应用类创建多个相同的协议类，这时候我们就可以使用智能指针来管理这些协议类的所有权。</p>\n<p>由此可以引申出两种情况：</p>\n<ul>\n<li>一个协议类只服务于一个应用类，这时候我们可以使用 <code v-pre>std::unique_ptr</code> 来管理这个协议类的所有权</li>\n<li>一个协议类可能会被多个应用类使用，这时候我们可以使用 <code v-pre>std::shared_ptr</code> 来管理这个协议类的所有权</li>\n</ul>\n<h2 id=\"std-unique-ptr\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#std-unique-ptr\"><span><code v-pre>std::unique_ptr</code></span></a></h2>\n<p><code v-pre>std::unique_ptr</code> 是一个独占所有权的智能指针，它只能有一个所有者，当这个所有者被销毁时，它所管理的资源也会被销毁。</p>\n<div class=\"language-cpp line-numbers-mode\" data-ext=\"cpp\" data-title=\"cpp\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">#</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">include</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> &#x3C;</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">memory</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Application</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> public</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 构造时，将协议类的所有权转移给 Application</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  Application</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">unique_ptr</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">Protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> :</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> protocol_</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">move</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">))</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> private</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">unique_ptr</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Protocol</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> protocol_</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> main</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 创建一个协议类，此时所有权掌握在 main 函数中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">unique_ptr</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Protocol</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> protocol </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">make_unique</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">Protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 创建一个应用类，将协议类的所有权转移给 Application</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">  Application </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">app</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">move</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"std-shared-ptr\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#std-shared-ptr\"><span><code v-pre>std::shared_ptr</code></span></a></h2>\n<p><code v-pre>std::shared_ptr</code> 是一个共享所有权的智能指针，它可以有多个所有者，当最后一个所有者被销毁时，它所管理的资源也会被销毁。</p>\n<div class=\"language-cpp line-numbers-mode\" data-ext=\"cpp\" data-title=\"cpp\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">#</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">include</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> &#x3C;</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">memory</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Application</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> public</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 构造时，将协议类的所有权转移给 Application</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  Application</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">shared_ptr</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">Protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> :</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> protocol_</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> private</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">shared_ptr</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Protocol</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> protocol_</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> main</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 创建一个协议类，此时所有权掌握在 main 函数中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">shared_ptr</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Protocol</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> protocol </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">make_shared</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">Protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 创建一个应用类，将协议类的所有权转移给 Application</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">  Application </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">app</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 创建另一个应用类，共享协议类的所有权</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">  Application </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">app2</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"论所有权的转让与移动\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#论所有权的转让与移动\"><span>论所有权的转让与移动</span></a></h2>\n<p>很多人都有一个误解，认为移动语义体现了所有权的转让，但是，二者是不同的。</p>\n<p>不论什么情况下，移动构造一定会重新创建资源对象，而至于资源内部的数据是如何移动的，这是对象的实现决定的，但针对资源对象本身，在这个过程中一定会重新创建一个资源对象。</p>\n<p>而所有权的转让是另一回事，它直接将自己拥有的资源本身交予了另一个对象，在这个过程中，没有任何资源的拷贝和移动操作（实际上，在计算机眼中，这个过程什么也没发生）。</p>\n<p>有趣的一点是，所有权的转让这一操作的实现依靠了移动语义，<code v-pre>std::unique_ptr</code> 不允许拷贝，但允许移动，刚才我们提到移动一定会创建新对象，而<code v-pre>std::unqiue_ptr</code>的移动虽然创建了新的<code v-pre>std::unique_ptr</code>，但其内部的指针仍然指向同一个资源对象，这就是所有权的转让的实现。</p>\n<p><code v-pre>std::shared_ptr</code>维护了一个引用计数，这让它可以进行拷贝，也可以进行移动，引用计数会时刻保证资源对象的生命周期，当最后一个所有者被销毁时，资源对象也会被销毁。</p>\n<h2 id=\"论资源的所有者和引用者\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#论资源的所有者和引用者\"><span>论资源的所有者和引用者</span></a></h2>\n<p>上文我们忽略的一种情况，有一些类或函数并不拥有资源，但他们需要暂时的资源使用权。对于我们已经建立的资源所有权模型，每一种所有权模式都有其对应的引用类型。</p>\n<p><code v-pre>std::unique_ptr</code> 对应的引用类型是原生指针，它指向资源对象本身，但在语义上不拥有它，只是暂时的使用。</p>\n<p><code v-pre>std::shared_ptr</code> 对应的引用类型是 <code v-pre>std::weak_ptr</code>，它指向资源对象，但不会增加引用计数，当资源对象被销毁时，<code v-pre>std::weak_ptr</code> 会被置空。</p>\n<div class=\"language-cpp line-numbers-mode\" data-ext=\"cpp\" data-title=\"cpp\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">#</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">include</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> &#x3C;</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">memory</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Application</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> public</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 构造时，将协议类的所有权转移给 Application</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  Application</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">shared_ptr</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">Protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> :</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> protocol_</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> private</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">shared_ptr</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Protocol</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> protocol_</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> foo</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">weak_ptr</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">Protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> weak_protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 使用 weak_ptr</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> main</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 创建一个协议类，此时所有权掌握在 main 函数中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">shared_ptr</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Protocol</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> protocol </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">make_shared</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\">Protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 创建一个应用类，将协议类的所有权转移给 Application</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">  Application </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">app</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 创建一个 weak_ptr，暂时使用协议类</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">weak_ptr</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Protocol</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> weak_protocol </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 调用函数，传递 weak_ptr</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">  foo</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">weak_protocol</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>值得注意的一点是，<code v-pre>std::weak_ptr</code> 不能直接使用，它需要通过 <code v-pre>lock</code> 方法转换为 <code v-pre>std::shared_ptr</code> 才能使用。</p>\n<h2 id=\"总结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#总结\"><span>总结</span></a></h2>\n<p>新的资源管理模型标志着现代 C++ 的到来，我一直秉承着一个观点——任何拥有内存申请和释放的程序都应当使用智能指针，这不仅仅是为了避免内存泄漏，更是为了通过所有权这一概念更好地构建应用逻辑模型。</p>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"说到现代C++，我们就不得不提到智能指针，这些模板类自C++11起被引入进标准库，不涉及操作系统、不涉及繁琐的内存申请流程，甚至你自己就能实现一个简单的智能指针。但即便如此，直到今天，仍然有人没有了解过，也不去使用智能指针。\n\n实际上我认为，智能指针为 C++ 这门语言带来了一个新的概念，即所有权。智能指针表面上管理了一块由用户申请的内存，但实际上它是管理了这一块资源的所有权。这一概念在 Rust 语言中被更加明确地表达出来，但在 C++ 中，我们也可以通过智能指针来实现。\n\n## 所有权\n\n为什么会产生所有权机制？回想一下你在古老的 C/C++ 工作时，你不得不手动申请内存，手动管理他们的销毁时机，使用对象，还要时刻提防可能存在的拷贝操作（后来还要提防一些移动操作）。这些东西一开始就该由程序员管理，但是别忘了，我们在谈论一个现代语言！\n\n在我看来，现代语言是高级语言的一个子集，它们应当在某一领域，解决过去程序员们的痛点。专注于底层的现代语言，如 Zig，它保留了内存管理的能力、并在语言层面支持了 Allocator, 扩充了内存管理的能力。而另一些现代语言，如 Rust，它在语言层面支持了所有权机制，使得程序员不再需要关心内存的申请和释放。\n\n我们在谈论C++，从C++11开始，这门古老的语言开始了自己的现代化之路，而其中一个最显著的改变就是智能指针和其带来的所有权机制。\n\n简单来说，所有权是一种属于关系，在这种关系下定义的对象其本身不会有隐式的复制和移动操作，将一个对象赋值、传递给另一个对象，只不过是将所有权转移给了另一个对象，在这个过程中，没有任何内存的拷贝和移动操作。\n\n## 所有权的实现\n\n对于 C++ 来说，所有权有两种，一种是独占所有权，另一种是共享所有权。独占所有权是指一个对象只能被一个所有者拥有，而共享所有权是指一个对象可以被多个所有者拥有。独占所有权在 C++ 中由 `std::unique_ptr` 实现，而共享所有权则由 `std::shared_ptr` 实现。\n\n在一些场景（尤其是嵌入式领域）中，我们通常会针对每一个通信协议创建一个类，他们负责与其他设备的通信实现，而一些上层应用类，它们会需要调用这些协议类的方法。\n\n创建这个协议类有两种方式：\n\n- 由应用类自己创建\n- 从外部创建，传递给应用类\n\n但一般情况下，这些协议类的 IO 通道都是有限的，我们不希望应用类创建多个相同的协议类，这时候我们就可以使用智能指针来管理这些协议类的所有权。\n\n由此可以引申出两种情况：\n\n- 一个协议类只服务于一个应用类，这时候我们可以使用 `std::unique_ptr` 来管理这个协议类的所有权\n- 一个协议类可能会被多个应用类使用，这时候我们可以使用 `std::shared_ptr` 来管理这个协议类的所有权\n\n## `std::unique_ptr`\n\n`std::unique_ptr` 是一个独占所有权的智能指针，它只能有一个所有者，当这个所有者被销毁时，它所管理的资源也会被销毁。\n\n```cpp\n#include <memory>\n\nclass Protocol {\n  // ...\n};\n\nclass Application {\n public:\n  // 构造时，将协议类的所有权转移给 Application\n  Application(std::unique_ptr<Protocol> protocol) : protocol_(std::move(protocol)) {}\n\n private:\n  std::unique_ptr<Protocol> protocol_;\n};\n\nint main() {\n  // 创建一个协议类，此时所有权掌握在 main 函数中\n  std::unique_ptr<Protocol> protocol = std::make_unique<Protocol>();\n\n  // 创建一个应用类，将协议类的所有权转移给 Application\n  Application app(std::move(protocol));\n}\n```\n\n## `std::shared_ptr`\n\n`std::shared_ptr` 是一个共享所有权的智能指针，它可以有多个所有者，当最后一个所有者被销毁时，它所管理的资源也会被销毁。\n\n```cpp\n#include <memory>\n\nclass Protocol {\n  // ...\n};\n\nclass Application {\n public:\n  // 构造时，将协议类的所有权转移给 Application\n  Application(std::shared_ptr<Protocol> protocol) : protocol_(protocol) {}\n\n private:\n  std::shared_ptr<Protocol> protocol_;\n};\n\nint main() {\n  // 创建一个协议类，此时所有权掌握在 main 函数中\n  std::shared_ptr<Protocol> protocol = std::make_shared<Protocol>();\n\n  // 创建一个应用类，将协议类的所有权转移给 Application\n  Application app(protocol);\n\n  // 创建另一个应用类，共享协议类的所有权\n  Application app2(protocol);\n}\n```\n\n## 论所有权的转让与移动\n\n很多人都有一个误解，认为移动语义体现了所有权的转让，但是，二者是不同的。\n\n不论什么情况下，移动构造一定会重新创建资源对象，而至于资源内部的数据是如何移动的，这是对象的实现决定的，但针对资源对象本身，在这个过程中一定会重新创建一个资源对象。\n\n而所有权的转让是另一回事，它直接将自己拥有的资源本身交予了另一个对象，在这个过程中，没有任何资源的拷贝和移动操作（实际上，在计算机眼中，这个过程什么也没发生）。\n\n有趣的一点是，所有权的转让这一操作的实现依靠了移动语义，`std::unique_ptr` 不允许拷贝，但允许移动，刚才我们提到移动一定会创建新对象，而`std::unqiue_ptr`的移动虽然创建了新的`std::unique_ptr`，但其内部的指针仍然指向同一个资源对象，这就是所有权的转让的实现。\n\n`std::shared_ptr`维护了一个引用计数，这让它可以进行拷贝，也可以进行移动，引用计数会时刻保证资源对象的生命周期，当最后一个所有者被销毁时，资源对象也会被销毁。\n\n## 论资源的所有者和引用者\n\n上文我们忽略的一种情况，有一些类或函数并不拥有资源，但他们需要暂时的资源使用权。对于我们已经建立的资源所有权模型，每一种所有权模式都有其对应的引用类型。\n\n`std::unique_ptr` 对应的引用类型是原生指针，它指向资源对象本身，但在语义上不拥有它，只是暂时的使用。\n\n`std::shared_ptr` 对应的引用类型是 `std::weak_ptr`，它指向资源对象，但不会增加引用计数，当资源对象被销毁时，`std::weak_ptr` 会被置空。\n\n```cpp\n#include <memory>\n\nclass Protocol {\n  // ...\n};\n\nclass Application {\n public:\n  // 构造时，将协议类的所有权转移给 Application\n  Application(std::shared_ptr<Protocol> protocol) : protocol_(protocol) {}\n\n private:\n  std::shared_ptr<Protocol> protocol_;\n};\n\nvoid foo(std::weak_ptr<Protocol> weak_protocol) {\n  // 使用 weak_ptr\n}\n\nint main() {\n  // 创建一个协议类，此时所有权掌握在 main 函数中\n  std::shared_ptr<Protocol> protocol = std::make_shared<Protocol>();\n\n  // 创建一个应用类，将协议类的所有权转移给 Application\n  Application app(protocol);\n\n  // 创建一个 weak_ptr，暂时使用协议类\n  std::weak_ptr<Protocol> weak_protocol = protocol;\n\n  // 调用函数，传递 weak_ptr\n  foo(weak_protocol);\n}\n```\n\n值得注意的一点是，`std::weak_ptr` 不能直接使用，它需要通过 `lock` 方法转换为 `std::shared_ptr` 才能使用。\n\n## 总结\n\n新的资源管理模型标志着现代 C++ 的到来，我一直秉承着一个观点——任何拥有内存申请和释放的程序都应当使用智能指针，这不仅仅是为了避免内存泄漏，更是为了通过所有权这一概念更好地构建应用逻辑模型。","excerpt":"","tasklists":0,"title":"","headers":[{"level":2,"title":"所有权","slug":"所有权","link":"#所有权","children":[]},{"level":2,"title":"所有权的实现","slug":"所有权的实现","link":"#所有权的实现","children":[]},{"level":2,"title":"std::unique_ptr","slug":"std-unique-ptr","link":"#std-unique-ptr","children":[]},{"level":2,"title":"std::shared_ptr","slug":"std-shared-ptr","link":"#std-shared-ptr","children":[]},{"level":2,"title":"论所有权的转让与移动","slug":"论所有权的转让与移动","link":"#论所有权的转让与移动","children":[]},{"level":2,"title":"论资源的所有者和引用者","slug":"论资源的所有者和引用者","link":"#论资源的所有者和引用者","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}]}}
