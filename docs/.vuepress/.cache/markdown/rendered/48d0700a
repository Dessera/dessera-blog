{"content":"<p>很长一段时间，我的工作环境都搭建在 Archlinux 上，不得不承认，Archlinux 是极其优秀的发行版，它的优秀体现在高度可定制性、完整的社区支持和丰富的软件源。这一切都很美好，直到我遇到了 NixOS。</p>\n<p>NixOS 是一个特殊的 Linux 发行版，它基于一个名为 Nix 的 <strong>不可变</strong>包管理器，允许用户通过编写<code v-pre>nix</code>配置文件来构建可复现的操作系统。只需要写一份配置文件，然后在任何平台上都可以通过一些简单的命令重新构建出操作系统。听起来是一个很美好的愿景，不是吗？这正是 NixOS 的强大之处。</p>\n<p>但凡事都有两面性，对于国内用户来说，NixOS 的学习门槛非常高，主要原因有以下几点：</p>\n<ul>\n<li>资料的分散和不完整</li>\n<li>资料的汉化程度不高</li>\n</ul>\n<p>由于以上种种问题，通向 NixOS 之路困难重重。</p>\n<p>本文的目的是记录我在使用 NixOS 时遇到的种种问题和它们的解决方法。</p>\n<h2 id=\"伊始-关于-nixos-的安装\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#伊始-关于-nixos-的安装\"><span>伊始 - 关于 NixOS 的安装</span></a></h2>\n<p>和其他的发行版一样，你需要下载 NixOS 的镜像文件，并制作启动媒介。前往该页面下载 NixOS 的镜像文件 <a href=\"https://nixos.org/download/\" target=\"_blank\" rel=\"noopener noreferrer\">NixOS下载</a>，注意，我们要下载的是 NixOS 而不是 Nix。</p>\n<p>在下载页面，我们有两种选择——图形化ISO和最简ISO，图形化ISO顾名思义，它可以用图形的方式进行系统安装，但缺点是可定制性很差；而最简ISO则可完全定义我们的安装流程。简单来说，如果你不想使用<code v-pre>ext4</code>或者想要深度定制一些内容，我更推荐使用最简ISO。</p>\n<p>下载好镜像，我们将其制作为USB启动器（我使用的是Ventoy），从USB启动并进入镜像，我们就进入了 NixOS 的安装程序（或者说 LiveCD）。</p>\n<p>详细的安装过程可以参考<a href=\"https://nixos-cn.org/\" target=\"_blank\" rel=\"noopener noreferrer\">NixOS CN</a>。</p>\n<h2 id=\"nix-配置文件\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#nix-配置文件\"><span>Nix 配置文件</span></a></h2>\n<p>NixOS 采用名为 Nix 的函数式语言作为配置语言，在传统模式下，系统配置的根文件为<code v-pre>/etc/nixos/configuration.nix</code>，在 Flake 模式下，入口可以是任何位置。</p>\n<p>下面是一个传统的<code v-pre>configuration.nix</code>配置：</p>\n<div class=\"language-nix line-numbers-mode\" data-ext=\"nix\" data-title=\"nix\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"># 配置函数参数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">{</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> config</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> lib</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> pkgs</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> ... </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  imports</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> [</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    # 导入子模块</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    # 硬件配置文件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">    ./hardware-configuration.nix</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  ];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  # 各种配置项</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  system</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">stateVersion</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">24.05</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>配置 NixOS 的过程，就是修改这个文件，然后重新生成系统的过程。</p>\n<p>例如，我们可以添加以下配置项以应用<code v-pre>grub2</code>：</p>\n<div class=\"language-nix line-numbers-mode\" data-ext=\"nix\" data-title=\"nix\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">boot</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">loader</span><span style=\"--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic\"> =</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  grub</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    enable</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> true</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    device</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">nodev</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    efiSupport</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> true</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  };</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  efi</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    canTouchEfiVariables</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> true</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    efiSysMountPoint</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">/boot</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  };</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span><span style=\"--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic\">;</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"flake\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#flake\"><span>Flake</span></a></h2>\n<p>传统的<code v-pre>configuration.nix</code>模式会从<code v-pre>nix-channel</code>配置的源中下载需要的包，这种模式实际上无法保证每次下载到的包是完全相同的，即无法保证可复现性。</p>\n<p>为了解决这一问题，NixOS 引入了 Flake，简单来说，Flake 将软件源统一为了<code v-pre>input</code>变量，并将该变量传递给名为<code v-pre>output</code>的函数（将软件源的配置也变成了声明式）。同时，引入了现代构建系统的<code v-pre>lock</code>文件来锁定软件版本，保证每一次构建获得的软件版本相同。</p>\n<p>Flake 配置的入口是<code v-pre>flake.nix</code>，下面是一个系统配置的入口：</p>\n<div class=\"language-nix line-numbers-mode\" data-ext=\"nix\" data-title=\"nix\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  # 工程的描述</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  description</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Dessera's NixOS configuration</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  # 输入源配置</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  inputs</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    nixpkgs</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">url</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">github:nixos/nixpkgs?ref=nixos-unstable</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  # 输出函数定义</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  outputs</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> self</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> nixpkgs</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> ... </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">@inputs</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">:</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    nixosConfigurations</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">nixos</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> nixpkgs</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">lib</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">nixosSystem</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">      system</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">x86_64-linux</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">      modules</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> [</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        # 将 configuration无缝迁移到flake配置</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">        ./configuration.nix</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">      ];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    };</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  };</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"配置参考\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#配置参考\"><span>配置参考</span></a></h2>\n<p>要查看<code v-pre>nix</code>模块的所有配置选项，可以参考<a href=\"https://search.nixos.org/options\" target=\"_blank\" rel=\"noopener noreferrer\">Nix Options</a></p>\n<p>要查看<code v-pre>pkgs</code>中包含的包，可以参考<a href=\"https://search.nixos.org/packages\" target=\"_blank\" rel=\"noopener noreferrer\">Nix Packages</a></p>\n<h2 id=\"不变性实现\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#不变性实现\"><span>不变性实现</span></a></h2>\n<p>NixOS 依靠上述的配置文件不仅<em>统一</em>了系统级的大部分配置文件，而且为它的函数式模式提供了保障。我们实际上是编写了一个巨大的系统配置函数，并规定了它的输入，通过这种方式生成的系统因为输入和函数本身的不变性和无状态性，天然就保证了可复现性。</p>\n<p>NixOS 中，我们可以通过以下命令生成新的系统，我们称之为<strong>世代</strong>：</p>\n<div class=\"language-shell line-numbers-mode\" data-ext=\"shell\" data-title=\"shell\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">sudo</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> nixos-rebuild</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> switch</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p>等待一段时间后，如果命令没有错误输出，我们便成功生成了新的世代，并切换到了新的系统。</p>\n<blockquote>\n<p>没错，NixOS 的重新生成大部分情况下可以热重载。</p>\n<p>如果不希望直接切换到新的系统，你可以将<code v-pre>switch</code>换为<code v-pre>boot</code>，它将在下次重启时切换到新的系统。</p>\n</blockquote>\n<p>我们在配置文件中声明的任何内容，都将被下载到<code v-pre>/nix/store</code>中，包或者配置文件以<code v-pre>${digest}-${name}</code>的方式存储在该路径下，例如，下载的<code v-pre>clang</code>可能存在于：</p>\n<div class=\"language-shell line-numbers-mode\" data-ext=\"shell\" data-title=\"shell\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">/nix/store/afxm7yvnadvv9a3vcrhzjvnmfhdgbfc0-clang-18.1.4</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p>该路径是一个只读文件系统，也就是所，我们不能在运行时更改该目录下的任何内容（除非通过nix），要清理该目录下没有使用的包，可以使用：</p>\n<div class=\"language-shell line-numbers-mode\" data-ext=\"shell\" data-title=\"shell\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">nix-collect-garbage</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -d</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"># 或者</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">nix</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> store</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> gc</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>在系统启动时，Nix 会根据当前选择的系统，将该目录下的内容动态链接至<code v-pre>/run/current-system/</code>中，并基于此启动系统。</p>\n<p>例如，我们实际的<code v-pre>sddm</code>主题目录位于：</p>\n<div class=\"language-shell line-numbers-mode\" data-ext=\"shell\" data-title=\"shell\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">/run/current-system/sw/share/sddm/themes</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div>","env":{"base":"/dessera-blog/","filePath":"/data/projects/dessera-blog/docs/preview/初探NixOS-01不变即完美.md","filePathRelative":"preview/初探NixOS-01不变即完美.md","frontmatter":{"title":"初探NixOS-01不变即完美","tags":["Linux","NixOS","Flake"],"createTime":"2024/05/01 15:16:01","permalink":"/article/9f12aw72/"},"sfcBlocks":{"template":{"type":"template","content":"<template><p>很长一段时间，我的工作环境都搭建在 Archlinux 上，不得不承认，Archlinux 是极其优秀的发行版，它的优秀体现在高度可定制性、完整的社区支持和丰富的软件源。这一切都很美好，直到我遇到了 NixOS。</p>\n<p>NixOS 是一个特殊的 Linux 发行版，它基于一个名为 Nix 的 <strong>不可变</strong>包管理器，允许用户通过编写<code v-pre>nix</code>配置文件来构建可复现的操作系统。只需要写一份配置文件，然后在任何平台上都可以通过一些简单的命令重新构建出操作系统。听起来是一个很美好的愿景，不是吗？这正是 NixOS 的强大之处。</p>\n<p>但凡事都有两面性，对于国内用户来说，NixOS 的学习门槛非常高，主要原因有以下几点：</p>\n<ul>\n<li>资料的分散和不完整</li>\n<li>资料的汉化程度不高</li>\n</ul>\n<p>由于以上种种问题，通向 NixOS 之路困难重重。</p>\n<p>本文的目的是记录我在使用 NixOS 时遇到的种种问题和它们的解决方法。</p>\n<h2 id=\"伊始-关于-nixos-的安装\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#伊始-关于-nixos-的安装\"><span>伊始 - 关于 NixOS 的安装</span></a></h2>\n<p>和其他的发行版一样，你需要下载 NixOS 的镜像文件，并制作启动媒介。前往该页面下载 NixOS 的镜像文件 <a href=\"https://nixos.org/download/\" target=\"_blank\" rel=\"noopener noreferrer\">NixOS下载</a>，注意，我们要下载的是 NixOS 而不是 Nix。</p>\n<p>在下载页面，我们有两种选择——图形化ISO和最简ISO，图形化ISO顾名思义，它可以用图形的方式进行系统安装，但缺点是可定制性很差；而最简ISO则可完全定义我们的安装流程。简单来说，如果你不想使用<code v-pre>ext4</code>或者想要深度定制一些内容，我更推荐使用最简ISO。</p>\n<p>下载好镜像，我们将其制作为USB启动器（我使用的是Ventoy），从USB启动并进入镜像，我们就进入了 NixOS 的安装程序（或者说 LiveCD）。</p>\n<p>详细的安装过程可以参考<a href=\"https://nixos-cn.org/\" target=\"_blank\" rel=\"noopener noreferrer\">NixOS CN</a>。</p>\n<h2 id=\"nix-配置文件\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#nix-配置文件\"><span>Nix 配置文件</span></a></h2>\n<p>NixOS 采用名为 Nix 的函数式语言作为配置语言，在传统模式下，系统配置的根文件为<code v-pre>/etc/nixos/configuration.nix</code>，在 Flake 模式下，入口可以是任何位置。</p>\n<p>下面是一个传统的<code v-pre>configuration.nix</code>配置：</p>\n<div class=\"language-nix line-numbers-mode\" data-ext=\"nix\" data-title=\"nix\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"># 配置函数参数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">{</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> config</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> lib</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> pkgs</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> ... </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  imports</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> [</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    # 导入子模块</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    # 硬件配置文件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">    ./hardware-configuration.nix</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  ];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  # 各种配置项</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  system</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">stateVersion</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">24.05</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>配置 NixOS 的过程，就是修改这个文件，然后重新生成系统的过程。</p>\n<p>例如，我们可以添加以下配置项以应用<code v-pre>grub2</code>：</p>\n<div class=\"language-nix line-numbers-mode\" data-ext=\"nix\" data-title=\"nix\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">boot</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">loader</span><span style=\"--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic\"> =</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  grub</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    enable</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> true</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    device</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">nodev</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    efiSupport</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> true</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  };</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  efi</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    canTouchEfiVariables</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> true</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    efiSysMountPoint</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">/boot</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  };</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span><span style=\"--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic\">;</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"flake\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#flake\"><span>Flake</span></a></h2>\n<p>传统的<code v-pre>configuration.nix</code>模式会从<code v-pre>nix-channel</code>配置的源中下载需要的包，这种模式实际上无法保证每次下载到的包是完全相同的，即无法保证可复现性。</p>\n<p>为了解决这一问题，NixOS 引入了 Flake，简单来说，Flake 将软件源统一为了<code v-pre>input</code>变量，并将该变量传递给名为<code v-pre>output</code>的函数（将软件源的配置也变成了声明式）。同时，引入了现代构建系统的<code v-pre>lock</code>文件来锁定软件版本，保证每一次构建获得的软件版本相同。</p>\n<p>Flake 配置的入口是<code v-pre>flake.nix</code>，下面是一个系统配置的入口：</p>\n<div class=\"language-nix line-numbers-mode\" data-ext=\"nix\" data-title=\"nix\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  # 工程的描述</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  description</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Dessera's NixOS configuration</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  # 输入源配置</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  inputs</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    nixpkgs</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">url</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">github:nixos/nixpkgs?ref=nixos-unstable</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  # 输出函数定义</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  outputs</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> self</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> nixpkgs</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> ... </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">@inputs</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">:</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    nixosConfigurations</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">nixos</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> nixpkgs</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">lib</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">nixosSystem</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">      system</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">x86_64-linux</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">      modules</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> [</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        # 将 configuration无缝迁移到flake配置</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">        ./configuration.nix</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">      ];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    };</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  };</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"配置参考\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#配置参考\"><span>配置参考</span></a></h2>\n<p>要查看<code v-pre>nix</code>模块的所有配置选项，可以参考<a href=\"https://search.nixos.org/options\" target=\"_blank\" rel=\"noopener noreferrer\">Nix Options</a></p>\n<p>要查看<code v-pre>pkgs</code>中包含的包，可以参考<a href=\"https://search.nixos.org/packages\" target=\"_blank\" rel=\"noopener noreferrer\">Nix Packages</a></p>\n<h2 id=\"不变性实现\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#不变性实现\"><span>不变性实现</span></a></h2>\n<p>NixOS 依靠上述的配置文件不仅<em>统一</em>了系统级的大部分配置文件，而且为它的函数式模式提供了保障。我们实际上是编写了一个巨大的系统配置函数，并规定了它的输入，通过这种方式生成的系统因为输入和函数本身的不变性和无状态性，天然就保证了可复现性。</p>\n<p>NixOS 中，我们可以通过以下命令生成新的系统，我们称之为<strong>世代</strong>：</p>\n<div class=\"language-shell line-numbers-mode\" data-ext=\"shell\" data-title=\"shell\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">sudo</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> nixos-rebuild</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> switch</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p>等待一段时间后，如果命令没有错误输出，我们便成功生成了新的世代，并切换到了新的系统。</p>\n<blockquote>\n<p>没错，NixOS 的重新生成大部分情况下可以热重载。</p>\n<p>如果不希望直接切换到新的系统，你可以将<code v-pre>switch</code>换为<code v-pre>boot</code>，它将在下次重启时切换到新的系统。</p>\n</blockquote>\n<p>我们在配置文件中声明的任何内容，都将被下载到<code v-pre>/nix/store</code>中，包或者配置文件以<code v-pre>${digest}-${name}</code>的方式存储在该路径下，例如，下载的<code v-pre>clang</code>可能存在于：</p>\n<div class=\"language-shell line-numbers-mode\" data-ext=\"shell\" data-title=\"shell\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">/nix/store/afxm7yvnadvv9a3vcrhzjvnmfhdgbfc0-clang-18.1.4</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p>该路径是一个只读文件系统，也就是所，我们不能在运行时更改该目录下的任何内容（除非通过nix），要清理该目录下没有使用的包，可以使用：</p>\n<div class=\"language-shell line-numbers-mode\" data-ext=\"shell\" data-title=\"shell\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">nix-collect-garbage</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -d</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"># 或者</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">nix</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> store</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> gc</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>在系统启动时，Nix 会根据当前选择的系统，将该目录下的内容动态链接至<code v-pre>/run/current-system/</code>中，并基于此启动系统。</p>\n<p>例如，我们实际的<code v-pre>sddm</code>主题目录位于：</p>\n<div class=\"language-shell line-numbers-mode\" data-ext=\"shell\" data-title=\"shell\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">/run/current-system/sw/share/sddm/themes</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div></template>","contentStripped":"<p>很长一段时间，我的工作环境都搭建在 Archlinux 上，不得不承认，Archlinux 是极其优秀的发行版，它的优秀体现在高度可定制性、完整的社区支持和丰富的软件源。这一切都很美好，直到我遇到了 NixOS。</p>\n<p>NixOS 是一个特殊的 Linux 发行版，它基于一个名为 Nix 的 <strong>不可变</strong>包管理器，允许用户通过编写<code v-pre>nix</code>配置文件来构建可复现的操作系统。只需要写一份配置文件，然后在任何平台上都可以通过一些简单的命令重新构建出操作系统。听起来是一个很美好的愿景，不是吗？这正是 NixOS 的强大之处。</p>\n<p>但凡事都有两面性，对于国内用户来说，NixOS 的学习门槛非常高，主要原因有以下几点：</p>\n<ul>\n<li>资料的分散和不完整</li>\n<li>资料的汉化程度不高</li>\n</ul>\n<p>由于以上种种问题，通向 NixOS 之路困难重重。</p>\n<p>本文的目的是记录我在使用 NixOS 时遇到的种种问题和它们的解决方法。</p>\n<h2 id=\"伊始-关于-nixos-的安装\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#伊始-关于-nixos-的安装\"><span>伊始 - 关于 NixOS 的安装</span></a></h2>\n<p>和其他的发行版一样，你需要下载 NixOS 的镜像文件，并制作启动媒介。前往该页面下载 NixOS 的镜像文件 <a href=\"https://nixos.org/download/\" target=\"_blank\" rel=\"noopener noreferrer\">NixOS下载</a>，注意，我们要下载的是 NixOS 而不是 Nix。</p>\n<p>在下载页面，我们有两种选择——图形化ISO和最简ISO，图形化ISO顾名思义，它可以用图形的方式进行系统安装，但缺点是可定制性很差；而最简ISO则可完全定义我们的安装流程。简单来说，如果你不想使用<code v-pre>ext4</code>或者想要深度定制一些内容，我更推荐使用最简ISO。</p>\n<p>下载好镜像，我们将其制作为USB启动器（我使用的是Ventoy），从USB启动并进入镜像，我们就进入了 NixOS 的安装程序（或者说 LiveCD）。</p>\n<p>详细的安装过程可以参考<a href=\"https://nixos-cn.org/\" target=\"_blank\" rel=\"noopener noreferrer\">NixOS CN</a>。</p>\n<h2 id=\"nix-配置文件\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#nix-配置文件\"><span>Nix 配置文件</span></a></h2>\n<p>NixOS 采用名为 Nix 的函数式语言作为配置语言，在传统模式下，系统配置的根文件为<code v-pre>/etc/nixos/configuration.nix</code>，在 Flake 模式下，入口可以是任何位置。</p>\n<p>下面是一个传统的<code v-pre>configuration.nix</code>配置：</p>\n<div class=\"language-nix line-numbers-mode\" data-ext=\"nix\" data-title=\"nix\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"># 配置函数参数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">{</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> config</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> lib</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> pkgs</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> ... </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  imports</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> [</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    # 导入子模块</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    # 硬件配置文件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">    ./hardware-configuration.nix</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  ];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  # 各种配置项</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  system</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">stateVersion</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">24.05</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>配置 NixOS 的过程，就是修改这个文件，然后重新生成系统的过程。</p>\n<p>例如，我们可以添加以下配置项以应用<code v-pre>grub2</code>：</p>\n<div class=\"language-nix line-numbers-mode\" data-ext=\"nix\" data-title=\"nix\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">boot</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">loader</span><span style=\"--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic\"> =</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  grub</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    enable</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> true</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    device</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">nodev</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    efiSupport</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> true</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  };</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  efi</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    canTouchEfiVariables</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> true</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    efiSysMountPoint</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">/boot</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  };</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span><span style=\"--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic\">;</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"flake\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#flake\"><span>Flake</span></a></h2>\n<p>传统的<code v-pre>configuration.nix</code>模式会从<code v-pre>nix-channel</code>配置的源中下载需要的包，这种模式实际上无法保证每次下载到的包是完全相同的，即无法保证可复现性。</p>\n<p>为了解决这一问题，NixOS 引入了 Flake，简单来说，Flake 将软件源统一为了<code v-pre>input</code>变量，并将该变量传递给名为<code v-pre>output</code>的函数（将软件源的配置也变成了声明式）。同时，引入了现代构建系统的<code v-pre>lock</code>文件来锁定软件版本，保证每一次构建获得的软件版本相同。</p>\n<p>Flake 配置的入口是<code v-pre>flake.nix</code>，下面是一个系统配置的入口：</p>\n<div class=\"language-nix line-numbers-mode\" data-ext=\"nix\" data-title=\"nix\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  # 工程的描述</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  description</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Dessera's NixOS configuration</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  # 输入源配置</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  inputs</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    nixpkgs</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">url</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">github:nixos/nixpkgs?ref=nixos-unstable</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  # 输出函数定义</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  outputs</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> self</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> nixpkgs</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> ... </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">@inputs</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">:</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">    nixosConfigurations</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">nixos</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> nixpkgs</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">lib</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">nixosSystem</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">      system</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">x86_64-linux</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">      modules</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> =</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> [</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        # 将 configuration无缝迁移到flake配置</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">        ./configuration.nix</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">      ];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    };</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  };</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"配置参考\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#配置参考\"><span>配置参考</span></a></h2>\n<p>要查看<code v-pre>nix</code>模块的所有配置选项，可以参考<a href=\"https://search.nixos.org/options\" target=\"_blank\" rel=\"noopener noreferrer\">Nix Options</a></p>\n<p>要查看<code v-pre>pkgs</code>中包含的包，可以参考<a href=\"https://search.nixos.org/packages\" target=\"_blank\" rel=\"noopener noreferrer\">Nix Packages</a></p>\n<h2 id=\"不变性实现\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#不变性实现\"><span>不变性实现</span></a></h2>\n<p>NixOS 依靠上述的配置文件不仅<em>统一</em>了系统级的大部分配置文件，而且为它的函数式模式提供了保障。我们实际上是编写了一个巨大的系统配置函数，并规定了它的输入，通过这种方式生成的系统因为输入和函数本身的不变性和无状态性，天然就保证了可复现性。</p>\n<p>NixOS 中，我们可以通过以下命令生成新的系统，我们称之为<strong>世代</strong>：</p>\n<div class=\"language-shell line-numbers-mode\" data-ext=\"shell\" data-title=\"shell\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">sudo</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> nixos-rebuild</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> switch</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p>等待一段时间后，如果命令没有错误输出，我们便成功生成了新的世代，并切换到了新的系统。</p>\n<blockquote>\n<p>没错，NixOS 的重新生成大部分情况下可以热重载。</p>\n<p>如果不希望直接切换到新的系统，你可以将<code v-pre>switch</code>换为<code v-pre>boot</code>，它将在下次重启时切换到新的系统。</p>\n</blockquote>\n<p>我们在配置文件中声明的任何内容，都将被下载到<code v-pre>/nix/store</code>中，包或者配置文件以<code v-pre>${digest}-${name}</code>的方式存储在该路径下，例如，下载的<code v-pre>clang</code>可能存在于：</p>\n<div class=\"language-shell line-numbers-mode\" data-ext=\"shell\" data-title=\"shell\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">/nix/store/afxm7yvnadvv9a3vcrhzjvnmfhdgbfc0-clang-18.1.4</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p>该路径是一个只读文件系统，也就是所，我们不能在运行时更改该目录下的任何内容（除非通过nix），要清理该目录下没有使用的包，可以使用：</p>\n<div class=\"language-shell line-numbers-mode\" data-ext=\"shell\" data-title=\"shell\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">nix-collect-garbage</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -d</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"># 或者</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">nix</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> store</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> gc</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>在系统启动时，Nix 会根据当前选择的系统，将该目录下的内容动态链接至<code v-pre>/run/current-system/</code>中，并基于此启动系统。</p>\n<p>例如，我们实际的<code v-pre>sddm</code>主题目录位于：</p>\n<div class=\"language-shell line-numbers-mode\" data-ext=\"shell\" data-title=\"shell\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">/run/current-system/sw/share/sddm/themes</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div>","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"很长一段时间，我的工作环境都搭建在 Archlinux 上，不得不承认，Archlinux 是极其优秀的发行版，它的优秀体现在高度可定制性、完整的社区支持和丰富的软件源。这一切都很美好，直到我遇到了 NixOS。\n\nNixOS 是一个特殊的 Linux 发行版，它基于一个名为 Nix 的 **不可变**包管理器，允许用户通过编写`nix`配置文件来构建可复现的操作系统。只需要写一份配置文件，然后在任何平台上都可以通过一些简单的命令重新构建出操作系统。听起来是一个很美好的愿景，不是吗？这正是 NixOS 的强大之处。\n\n但凡事都有两面性，对于国内用户来说，NixOS 的学习门槛非常高，主要原因有以下几点：\n\n- 资料的分散和不完整\n- 资料的汉化程度不高\n\n由于以上种种问题，通向 NixOS 之路困难重重。\n\n本文的目的是记录我在使用 NixOS 时遇到的种种问题和它们的解决方法。\n\n## 伊始 - 关于 NixOS 的安装\n\n和其他的发行版一样，你需要下载 NixOS 的镜像文件，并制作启动媒介。前往该页面下载 NixOS 的镜像文件 [NixOS下载](https://nixos.org/download/)，注意，我们要下载的是 NixOS 而不是 Nix。\n\n在下载页面，我们有两种选择——图形化ISO和最简ISO，图形化ISO顾名思义，它可以用图形的方式进行系统安装，但缺点是可定制性很差；而最简ISO则可完全定义我们的安装流程。简单来说，如果你不想使用`ext4`或者想要深度定制一些内容，我更推荐使用最简ISO。\n\n下载好镜像，我们将其制作为USB启动器（我使用的是Ventoy），从USB启动并进入镜像，我们就进入了 NixOS 的安装程序（或者说 LiveCD）。\n\n详细的安装过程可以参考[NixOS CN](https://nixos-cn.org/)。\n\n## Nix 配置文件\n\nNixOS 采用名为 Nix 的函数式语言作为配置语言，在传统模式下，系统配置的根文件为`/etc/nixos/configuration.nix`，在 Flake 模式下，入口可以是任何位置。\n\n下面是一个传统的`configuration.nix`配置：\n\n```nix\n# 配置函数参数\n{ config, lib, pkgs, ... }:\n\n{\n  imports = [\n    # 导入子模块\n    # 硬件配置文件\n    ./hardware-configuration.nix\n  ];\n\n  # 各种配置项\n\n  system.stateVersion = \"24.05\";\n}\n```\n\n配置 NixOS 的过程，就是修改这个文件，然后重新生成系统的过程。\n\n例如，我们可以添加以下配置项以应用`grub2`：\n\n```nix\nboot.loader = {\n  grub = {\n    enable = true;\n    device = \"nodev\";\n    efiSupport = true;\n  };\n  efi = {\n    canTouchEfiVariables = true;\n    efiSysMountPoint = \"/boot\";\n  };\n};\n```\n\n## Flake\n\n传统的`configuration.nix`模式会从`nix-channel`配置的源中下载需要的包，这种模式实际上无法保证每次下载到的包是完全相同的，即无法保证可复现性。\n\n为了解决这一问题，NixOS 引入了 Flake，简单来说，Flake 将软件源统一为了`input`变量，并将该变量传递给名为`output`的函数（将软件源的配置也变成了声明式）。同时，引入了现代构建系统的`lock`文件来锁定软件版本，保证每一次构建获得的软件版本相同。\n\nFlake 配置的入口是`flake.nix`，下面是一个系统配置的入口：\n\n```nix\n{\n  # 工程的描述\n  description = \"Dessera's NixOS configuration\";\n\n  # 输入源配置\n  inputs = {\n    nixpkgs.url = \"github:nixos/nixpkgs?ref=nixos-unstable\";\n  };\n\n  # 输出函数定义\n  outputs = { self, nixpkgs, ... }@inputs: {\n    nixosConfigurations.nixos = nixpkgs.lib.nixosSystem {\n      system = \"x86_64-linux\";\n      modules = [\n        # 将 configuration无缝迁移到flake配置\n        ./configuration.nix\n      ];\n    };\n  };\n}\n```\n\n## 配置参考\n\n要查看`nix`模块的所有配置选项，可以参考[Nix Options](https://search.nixos.org/options)\n\n要查看`pkgs`中包含的包，可以参考[Nix Packages](https://search.nixos.org/packages)\n\n## 不变性实现\n\nNixOS 依靠上述的配置文件不仅*统一*了系统级的大部分配置文件，而且为它的函数式模式提供了保障。我们实际上是编写了一个巨大的系统配置函数，并规定了它的输入，通过这种方式生成的系统因为输入和函数本身的不变性和无状态性，天然就保证了可复现性。\n\nNixOS 中，我们可以通过以下命令生成新的系统，我们称之为**世代**：\n\n```shell\nsudo nixos-rebuild switch\n```\n\n等待一段时间后，如果命令没有错误输出，我们便成功生成了新的世代，并切换到了新的系统。\n\n> 没错，NixOS 的重新生成大部分情况下可以热重载。\n>\n> 如果不希望直接切换到新的系统，你可以将`switch`换为`boot`，它将在下次重启时切换到新的系统。\n\n我们在配置文件中声明的任何内容，都将被下载到`/nix/store`中，包或者配置文件以`${digest}-${name}`的方式存储在该路径下，例如，下载的`clang`可能存在于：\n\n```shell\n/nix/store/afxm7yvnadvv9a3vcrhzjvnmfhdgbfc0-clang-18.1.4\n```\n\n该路径是一个只读文件系统，也就是所，我们不能在运行时更改该目录下的任何内容（除非通过nix），要清理该目录下没有使用的包，可以使用：\n\n```shell\nnix-collect-garbage -d\n# 或者\nnix store gc\n```\n\n在系统启动时，Nix 会根据当前选择的系统，将该目录下的内容动态链接至`/run/current-system/`中，并基于此启动系统。\n\n例如，我们实际的`sddm`主题目录位于：\n\n```shell\n/run/current-system/sw/share/sddm/themes\n```","excerpt":"","tasklists":0,"title":"","headers":[{"level":2,"title":"伊始 - 关于 NixOS 的安装","slug":"伊始-关于-nixos-的安装","link":"#伊始-关于-nixos-的安装","children":[]},{"level":2,"title":"Nix 配置文件","slug":"nix-配置文件","link":"#nix-配置文件","children":[]},{"level":2,"title":"Flake","slug":"flake","link":"#flake","children":[]},{"level":2,"title":"配置参考","slug":"配置参考","link":"#配置参考","children":[]},{"level":2,"title":"不变性实现","slug":"不变性实现","link":"#不变性实现","children":[]}]}}
